scalar Date

type User {
  id: ID!
  username: String!
  password: String!
  domains: [Domain]!
}

type Domain {
  id: String!
  title: String!
  createdAt: Date!
  complPercent: Int!
  userId: String!
  collections: [Collection]!
}

type Collection {
  id: ID!
  title: String!
  createdAt: Date!
  dueDate: Date
  domainId: String!
  duration: Date
  complPercent: Int!
  todoLists: [TodoList]!
}

type TodoList {
  id: ID!
  title: String!
  createdAt: Date!
  dueDate: Date
  collectionId: String!
  duration: Date
  complPercent: Int!
  todos: [Todo]!
}

type Meta {
  url: String!
  title: String
  description: String
  img: String
}

type Todo {
  id: ID!
  url: String
  title: String!
  createdAt: Date!
  isWatched: Boolean!
  watchedAt: Date
  dueDate: Date
  todoListId: String!
  duration: Date
  meta: Meta
}

type Query {
  getDomains: [Domain]!
  getDomain(domainId: ID!): Domain
  getCollections(domainId: ID!): [Collection]!
}

type AuthPayload {
  token: String
  user: User
}

type Mutation {
  addDomain(title: String!): Domain!
  addCollection(title: String!): Collection!
  addTodoList(title: String!): TodoList!
  addTodo(title: String!): Todo!

  updateDomain(domainId: String!, title: String): Domain!
  updateCollection(
    collectionId: String!
    title: String
    dueDate: Date
    duration: Date
    complPercent: Int
  ): Collection!
  updateTodoList(
    todoListId: String!
    title: String
    dueDate: Date
    duration: Date
    complPercent: Int
  ): TodoList!
  updateTodo(
    todoId: String!
    title: String
    dueDate: Date
    duration: Date
    complPercent: Int
    isWatched: Boolean
  ): Todo!

  deleteDomain(domainId: String!): Boolean
  deleteCollection(collectionId: String!): Boolean
  deleteTodoList(todoListId: String!): Boolean
  deleteTodo(todoId: String!): Boolean

  signup(username: String!, password: String!): AuthPayload
  login(username: String!, password: String!): AuthPayload
}
